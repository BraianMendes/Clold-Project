#include <ESP8266WiFi.h>  //essa biblioteca já vem com a IDE. Portanto, não é preciso baixar nenhuma biblioteca adicional
 
//defines
#define SSID_REDE     "Mi henrique"  //coloque aqui o nome da rede que se deseja conectar
#define SENHA_REDE    "santosfc"  //coloque aqui a senha da rede que se deseja conectar
#define INTERVALO_ENVIO  30000  //intervalo entre envios de dados ao ThingSpeak (em ms)
 
//constantes e variáveis globais
char EnderecoBanco[] = "db-hackathon.cweudo5c98bn.sa-east-1.rds.amazonaws.com"; // porta 3306
String ChaveEscritaBanco = "3306";
long lastConnectionTime; 
WiFiClient client;
 
//prototypes
void EnviaInformacoesBanco(String StringDados);
void FazConexaoWiFi(void);
float FazLeitura(void);
 
/*
 * Implementações
 */
 
//Função: envia informações ao ThingSpeak
//Parâmetros: String com a  informação a ser enviada
//Retorno: nenhum
void EnviaInformacoesSQL(String StringDados)
{
    if (client.connect(EnderecoBanco, 80))
    {         
        //faz a requisição HTTP ao SQL
        client.print("POST /update HTTP/1.1\n");
        client.print("Host: db-hackathon.cweudo5c98bn.sa-east-1.rds.amazonaws.com\n");
        client.print("Connection: close\n");
        client.print("X-THINGSPEAKAPIKEY: "+ChaveEscritaBanco+"\n");
        client.print("Content-Type: application/x-www-form-urlencoded\n");
        client.print("Content-Length: ");
        client.print(StringDados.length());
        client.print("\n\n");
        client.print(StringDados);
   
        lastConnectionTime = millis();
        Serial.println("- Informações enviadas ao SQL");
     }   
}
 
//Função: faz a conexão WiFI
//Parâmetros: nenhum
//Retorno: nenhum
void FazConexaoWiFi(void)
{
    client.stop();
    Serial.println("Conectando-se à rede WiFi...");
    Serial.println();  
    delay(1000);
    WiFi.begin(SSID_REDE, SENHA_REDE);
 
    while (WiFi.status() != WL_CONNECTED) 
    {
        delay(500);
        Serial.print(".");
    }
 
    Serial.println("");
    Serial.println("WiFi connectado com sucesso!");  
    Serial.println("IP obtido: ");
    Serial.println(WiFi.localIP());
 
    delay(1000);
}
 
//Função: faz a leitura do nível de umidade
//Parâmetros: nenhum
//Retorno: umidade percentual (0-100)
//Observação: o ADC do NodeMCU permite até, no máximo, 3.3V. Dessa forma,
//            para 3.3V, obtem-se (empiricamente) 978 como leitura de ADC
float Contador(void)
{
    int teste;
    
    teste = 1;
    Serial.print ("teste");
    Serial.println (teste + 1);
}
void setup()
{  
    Serial.begin(9600);
    lastConnectionTime = 0; 
    FazConexaoWiFi();
    Serial.println("Dados");
}
 
//loop principal
void loop()
{
     int valor;
     char haha[4];
     
    //Força desconexão ao ThingSpeak (se ainda estiver desconectado)
    if (client.connected())
    {
        client.stop();
        Serial.println("- Desconectado do ThingSpeak");
        Serial.println();
    }
 
    valor = 2;
        
    //verifica se está conectado no WiFi e se é o momento de enviar dados ao ThingSpeak
    if(!client.connected() && 
      (millis() - lastConnectionTime > INTERVALO_ENVIO))
    {
        sprintf(haha,"field1=%d",valor);
        EnviaInformacoesSQL(haha);
    }
 
     delay(1000);
}
